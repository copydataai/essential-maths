<nav class="navbar bg-base-100">
  <div class="navbar-start">
    <div class="dropdown rounded lg:hidden">
      <label class="btn btn-accent swap swap-rotate">
  
        <!-- this hidden checkbox controls the state -->
        <input type="checkbox" />
        
        <!-- hamburger icon -->
        <svg class="swap-off fill-current" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512"><path d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z"/></svg>
        
        <!-- close icon -->
        <svg class="swap-on fill-current" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 512 512"><polygon points="400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49"/></svg>
        
      </label>
      <ul class="menu dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
        <li><a href="/number-system">Number system</a></li>
        <li><a href="/cryptology">Cryptology</a></li>
        <li>
          <a class="" href="/functions">Functions</a>
        </li>
        <li>
          <a class="" href="/matrices">Matrices
          </a>
        </li>
      </ul>
    </div>
    <a class="btn btn-ghost text-xl" href="/">Essential Maths</a>
  </div>
  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal px-1">
      <li><a href="/number-system">Number system</a></li>
      <li><a href="/cryptology">Cryptology</a></li>
      <li>
        <a class="" href="/functions">Functions</a>
      </li>
      <li>
        <a class="" href="/matrices">Matrices
        </a>
      </li>
    </ul>
  </div>
  <div class="navbar-end">
    <label class="swap swap-rotate">
  
      <!-- this hidden checkbox controls the state -->
      <input type="checkbox" class="theme-controller" value="synthwave" />
      
      <!-- sun icon -->
      <svg class="swap-on fill-current w-10 h-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"/></svg>
      
      <!-- moon icon -->
      <svg class="swap-off fill-current w-10 h-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"/></svg>
      
    </label>
  </div>
</nav>
<script is:inline>
  const primaryColorScheme = ""; // "synthwave" | "bumblebee"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;

    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "synthwave"
      : "bumblebee";
  }

  let themeValue = getPreferTheme();

  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }

  function reflectPreference() {
    document.firstElementChild.setAttribute("data-theme", themeValue);

    document.querySelector(".theme-controller")?.setAttribute("aria-label", themeValue);

    // Get a reference to the body element
    const body = document.body;

    // Check if the body element exists before using getComputedStyle
    if (body) {
      // Get the computed styles for the body element
      const computedStyles = window.getComputedStyle(body);

      // Get the background color property
      const bgColor = computedStyles.backgroundColor;

      // Set the background color in <meta theme-color ... />
      document
        .querySelector("meta[name='theme-color']")
        ?.setAttribute("content", bgColor);
    }
  }

  reflectPreference();

  window.onload = () => {
    function setThemeFeature() {
      // set on load so screen readers can get the latest value on the button
      reflectPreference();

      // now this script can find and listen for clicks on the control
      document.querySelector(".theme-controller")?.addEventListener("click", () => {
        themeValue = themeValue === "bumblebee" ? "synthwave" : "bumblebee";
        setPreference();
      });
    }

    setThemeFeature();

    // Runs on view transitions navigation
    document.addEventListener("astro:after-swap", setThemeFeature);
  };

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "synthwave" : "bumblebee";
      setPreference();
    });

</script>
